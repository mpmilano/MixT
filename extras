#pragma once
#include <type_traits>

template <template <typename...> class F, typename P>
struct any;

template<
	template <typename...> class F,
	template <typename...> class C, typename E, typename... En
	>
struct any <F, C <E, En...> >:
	public std::conditional <F <E>{}, std::integral_constant <bool, true>, any <F, C<En...> > >::type {};

template <template <typename...> class F, template <typename...> class C>
struct any <F, C <> > : public std::integral_constant <bool, false> {};


template <typename...> struct pack { };


template <typename F, typename...Args>
void funcptr_helper(...);

template <typename F, typename...Args>
auto funcptr_helper(F, Args...) -> decltype(std::declval<F>()(std::declval<Args>()...));

template <typename F, typename...Args>
struct funcptr {
	typedef decltype(funcptr_helper<F, Args...>(std::declval<F>(), std::declval<Args>()...)) (*type)(Args...);
};

template <typename F, typename...Args>
struct is_stateless : std::is_convertible<F, typename funcptr<F, Args...>::type>::type {};

template <bool b>
struct bool_const : std::integral_constant <bool, b> {};

template<typename T>
constexpr bool wrapper(T){
	return true;
}

template
<typename F,
 typename std::decay<F>::type FP,
 typename... Args,
 bool = wrapper(FP(Args{}...))>
constexpr bool is_constexpr_impl(bool&&)
{
	return true;
}

template
<typename F,
 typename std::decay<F>::type FP,
 typename... Args>
constexpr bool is_constexpr_impl(const bool&&)
{
	return false;
}

template
<typename F,
 typename std::decay<F>::type FP,
 typename... Args>
constexpr bool is_constexpr(Args...)
{
	return is_constexpr_impl<F, FP, Args...>(0);
}

#define COUNTER_READ_CRUMB( TAG, RANK, ACC ) counter_crumb( TAG(), constant_index< RANK >(), constant_index< ACC >() )
#define COUNTER_READ( TAG ) COUNTER_READ_CRUMB( TAG, 1, COUNTER_READ_CRUMB( TAG, 2, COUNTER_READ_CRUMB( TAG, 4, COUNTER_READ_CRUMB( TAG, 8, \
																    COUNTER_READ_CRUMB( TAG, 16, COUNTER_READ_CRUMB( TAG, 32, COUNTER_READ_CRUMB( TAG, 64, COUNTER_READ_CRUMB( TAG, 128, 0 ) ) ) ) ) ) ) )

#define COUNTER_INC( TAG ) \
	constant_index< COUNTER_READ( TAG ) + 1 > \
	constexpr counter_crumb( TAG, constant_index< ( COUNTER_READ( TAG ) + 1 ) & ~ COUNTER_READ( TAG ) >, \
				 constant_index< ( COUNTER_READ( TAG ) + 1 ) & COUNTER_READ( TAG ) > ) { return {}; }

#define COUNTER_LINK_NAMESPACE( NS ) using NS::counter_crumb;

#define REGISTERED_CLASS( TAG, KEY, NAME ) KEY NAME &register_type( TAG, decltype( COUNTER_READ( TAG ) ) ); \
	COUNTER_INC( TAG ) KEY NAME /* class definition follows */

#include <utility>

template< std::size_t n >
struct constant_index : std::integral_constant< std::size_t, n > {};

template< typename id, std::size_t rank, std::size_t acc >
constexpr constant_index< acc > counter_crumb( id, constant_index< rank >, constant_index< acc > ) { return {}; } // found by ADL via constant_index


template< typename Arg1, typename... Args>
auto make_array(Arg1 a, Args... rest){
	std::array<Arg1, sizeof...(Args) + 1> &&ret { { a, rest... } };
	return ret;
}



template<typename F>
void perfect_forward(F &f, ...){
	f();
}

template<typename F, typename R>
typename std::enable_if<!std::is_same<R,void>::value, R>::type
perfect_forward(F &f, R&& r){
	f();
	return std::move(r);
}


template <typename T>
class release_deleter{
public:
	release_deleter() : released_(false){}
	void release() {released_ = true;}
	void operator()(T* ptr){if(!released_) delete ptr;}
private:
	bool released_;
};

/*
..

shared_ptr<some_type> ptr(new some_type, release_deleter<some_type>());

..

release_deleter<some_type>* deleter = get_deleter<release_deleter<some_type>>(ptr);
deleter->release();
some_type* released_ptr = ptr.get();
*/
